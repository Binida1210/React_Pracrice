import { useState } from "react";
import "./style.css";

export default function FileUploadDrop() {
  const [fileName, setFileName] = useState(null);
  const [highlight, setHighlight] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);
  const [fileSize, setFileSize] = useState(null);
  const [error, setError] = useState(null);

  // FUNCTION KI·ªÇM TRA FILE C√ì PH·∫¢I ·∫¢NH KH√îNG
  const isValidImageFile = (file) => {
    const validTypes = [
      "image/jpeg",
      "image/jpg",
      "image/png",
      "image/gif",
      "image/webp",
    ];
    return validTypes.includes(file.type);
  };

  // FUNCTION ƒê·ªåC FILE B·∫∞NG FILE READER API
  const readFileAsDataURL = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();

      reader.onload = (e) => {
        resolve(e.target.result); // Base64 string c·ªßa ·∫£nh
      };

      reader.onerror = () => {
        reject(new Error("Kh√¥ng th·ªÉ ƒë·ªçc file"));
      };

      reader.readAsDataURL(file); // ƒê·ªçc file th√†nh data URL
    });
  };

  // üéØ FUNCTION X·ª¨ L√ù FILE ƒê∆Ø·ª¢C CH·ªåN
  const processFile = async (file) => {
    setError(null);

    // Ki·ªÉm tra lo·∫°i file
    if (!isValidImageFile(file)) {
      setError("‚ùå Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF, WebP)");
      return;
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      setError("‚ùå File qu√° l·ªõn! T·ªëi ƒëa 5MB");
      return;
    }

    try {
      // ƒê·ªçc file th√†nh base64 ƒë·ªÉ preview
      const dataURL = await readFileAsDataURL(file);
      console.log(dataURL);
      // C·∫≠p nh·∫≠t state
      setFileName(file.name);
      setFileSize(file.size);
      setImagePreview(dataURL);
      console.log("‚úÖ File processed successfully:", file);
    } catch (err) {
      setError("‚ùå L·ªói khi ƒë·ªçc file: " + err.message);
    }
  };

  // X·ª≠ l√Ω khi th·∫£ file
  const handleDrop = (e) => {
    e.preventDefault();
    setHighlight(false);

    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      processFile(files[0]); // S·ª≠ d·ª•ng function m·ªõi
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setHighlight(true);
  };

  const handleDragLeave = () => {
    setHighlight(false);
  };

  // X·ª≠ l√Ω khi ch·ªçn file qua input
  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      processFile(file); // S·ª≠ d·ª•ng function m·ªõi
    }
  };

  // Reset function
  const resetUpload = () => {
    setFileName(null);
    setImagePreview(null);
    setFileSize(null);
    setError(null);
  };

  return (
    <div className="main-container">
      <div className="layout-container">
        {/* B·∫æN TR√ÅI - PH·∫¶N UPLOAD */}
        <div className="upload-section">
          <h2>üìÇ Upload Image</h2>

          {/* Error message */}
          {error && <div className="error-message">{error}</div>}

          {/* Drop zone */}
          <div
            className={`drop-zone ${highlight ? "highlight" : ""}`}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            {fileName ? (
              <div className="file-info">
                <p>File name: {fileName}</p>
                <p>File size: {(fileSize / 1024).toFixed(2)} KB</p>
              </div>
            ) : (
              <p> ‚¨ÜÔ∏è K√©o ·∫£nh v√†o ƒë√¢y ho·∫∑c click ch·ªçn</p>
            )}
          </div>

          {/* Input ch·ªçn file */}
          <label className="file-button">
            üìÅ Ch·ªçn ·∫£nh t·ª´ m√°y
            <input
              type="file"
              accept="image/*"
              onChange={handleFileSelect}
              hidden
            />
          </label>

          {/* Reset button */}
          {fileName && (
            <button className="reset-btn" onClick={resetUpload}>
              üîÑ Upload l·∫°i
            </button>
          )}
        </div>

        {/* B·∫æN PH·∫¢I - PH·∫¶N PROFILE PREVIEW */}
        <div className="profile-section">
          <h2>Tran Xuan Binh</h2>

          <div className="profile-card">
            <div className="avatar-container">
              {imagePreview ? (
                <img
                  src={imagePreview}
                  alt="Profile Avatar"
                  className="avatar-image"
                />
              ) : (
                <div className="avatar-placeholder">
                  <p>No avatar</p>
                </div>
              )}
            </div>

            <div className="profile-info">
              <p className="title">Fullstack Developer</p>
              <p className="email">binida2k1@gmail.com</p>

              <div className="stats">
                <div className="stat">
                  <span className="number">1.2k</span>
                  <span className="label">Likes</span>
                </div>
                <div className="stat">
                  <span className="number">28</span>
                  <span className="label">Followers</span>
                </div>
                <div className="stat">
                  <span className="number">110</span>
                  <span className="label">Following</span>
                </div>
              </div>

              <button className="profile-btn">
                {imagePreview ? "‚úÖ Avatar Updated" : "‚¨ÜÔ∏è Upload Avatar"}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
